
#define UART_REG_TRANSMIT 0
#define UART_REG_RECEIVE 0
#define UART_REG_FCR 2
#define UART_REG_LCR 3 
#define UART_REG_LSR 5
#define UART_REG_IER 0x1

#define UART_REG_FCF_FIFOENABLE 1
#define UART_REG_LCR_THRE 1 5 <<
#define UART_REG_LSR_DR 1


\ "ns16550a compatible" UART DRIVER

CODE initUart
    # taken from https://github.com/safinsingh/ns16550a/tree/master
    # Args:
    # a0 - UART base address
    mv  t0, a0

    # 0x3 -> 8 bit word length
    li  t1, 0x3
    sb  t1, UART_REG_LCR(t0)

    # 0x1 -> enable FIFOs
    li  t1, 0x1
    sb  t1, UART_REG_LCR(t0)

    # 0x1 -> enable reciever interrupts
    sb  t1, UART_REG_IER(t0)
    ret
END-CODE

CODE putc
    # Args:
    # a0 - character to output
    # a1 - UART base address
    addi sp, sp, -16  # allocate 16 bytes on stack
    sw   ra, 12(sp)   # store return address on stack

0:
    lb t0, UART_REG_LCR(a1)
    andi t1, t0, UART_REG_LCR_THRE
    beqz t1, 1f
    j 0b
1:
    sb a0, UART_REG_TRANSMIT(a1)

    lw   ra, 12(sp)  # load return address from stack
    addi sp, sp, 16  # restore stack pointer
    ret

END-CODE

CODE puts
    # Args:
    # a0 - string address
    # a1 - UART base address
    # while string byte not null
    SaveReturnAddress
    mv t3, a0
1:
    lb t0, 0(t3)
    beq t0, zero, 2f
    mv a0, t0
    call ' putc
    addi t3, t3, 1
    j 1b
2:
    RestoreReturnAddress
    ret

END-CODE

CODE getc_block
    # Args:
    # a0 - UART base address
    # Returns:
    # a0 - char from uart
    SaveReturnAddress
    mv t0, a0
CODL getc_block_loop_start
    call  ' getc
    beqz a0, ' notgotchar
    RestoreReturnAddress
    ret
END-CODE
    
CODE notgotchar
    mv a0, t0
    j ' getc_block_loop_start
    # should never get here
    RestoreReturnAddress
    ret
END-CODE

CODE getc
    # Args:
    # a0 - UART base address
    # Returns:
    # a0 - char from uart
    SaveReturnAddress
    add sp, sp, -8
    sw t0, 0(sp)
    sw t1, 4(sp)
    lbu t0, UART_REG_LSR(a0)
    andi t1, t0, UART_REG_LSR_DR
    beqz t1, 1f \ bytenotread
    j 0f \ byteread
1: \ bytenotread:
    li a0, 0
    j 2f \ end
0: \ byteread:
    lb a0, UART_REG_RECEIVE(a0)
2: \ end:
    lw t0, 0(sp)
    lw t1, 4(sp)
    add sp, sp, 8
    RestoreReturnAddress
    ret

END-CODE
